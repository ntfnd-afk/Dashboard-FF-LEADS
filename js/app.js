// ========================================
// FF Dashboard - Main Application
// ========================================

// Global variables
var priceDatabase = [];
var calculationItems = [];
var nextItemId = 1;
var leads = [];
var nextLeadId = 1;
var currentTab = 'dashboard';
var reminders = [];
var nextReminderId = 1;
var currentUser = null;
var users = [];
// –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ)
var TELEGRAM_CONFIG = {
    botToken: 'YOUR_BOT_TOKEN_HERE', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    chatType: 'group', // –í—Å–µ–≥–¥–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    groupId: 'YOUR_GROUP_ID_HERE' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)
};

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–∏–∑–º–µ–Ω—è–µ–º—ã–µ)
var globalTelegramSettings = {
    userId: '', // user ID for tagging in groups (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å)
    silentMode: true, // —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    tagForReminders: true // —Ç–µ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
};

// API Configuration
var API_BASE_URL = 'http://51.250.97.39:3001/api'; // Server notifications API
// var API_BASE_URL = 'http://localhost:3000/api'; // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
var isOnline = navigator.onLine;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
window.addEventListener('online', () => {
    isOnline = true;
    console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    updateConnectionStatus();
});

window.addEventListener('offline', () => {
    isOnline = false;
    console.log('üì± –†–∞–±–æ—Ç–∞–µ–º –æ—Ñ–ª–∞–π–Ω');
    updateConnectionStatus();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
var leadStatuses = [
    { id: 'new', name: '–ù–æ–≤—ã–π', color: 'blue' },
    { id: 'contacted', name: '–°–≤—è–∑–∞–ª–∏—Å—å', color: 'yellow' },
    { id: 'quoted', name: '–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–º–µ—Ç—É', color: 'purple' },
    { id: 'negotiating', name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', color: 'orange' },
    { id: 'won', name: '–ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ', color: 'green' },
    { id: 'lost', name: '–ó–∞–∫—Ä—ã—Ç –Ω–µ—É—Å–ø–µ—à–Ω–æ', color: 'red' }
];

var leadSources = [
    { id: 'website', name: '–°–∞–π—Ç' },
    { id: 'instagram', name: 'Instagram' },
    { id: 'facebook', name: 'Facebook' },
    { id: 'google', name: 'Google' },
    { id: 'yandex', name: '–Ø–Ω–¥–µ–∫—Å' },
    { id: 'referral', name: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è' },
    { id: 'phone', name: '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫' },
    { id: 'other', name: '–î—Ä—É–≥–æ–µ' }
];

var pipelineStages = [
    { id: 'new', name: '–ù–æ–≤—ã–µ –ª–∏–¥—ã', color: 'blue', order: 1 },
    { id: 'contacted', name: '–°–≤—è–∑–∞–ª–∏—Å—å', color: 'yellow', order: 2 },
    { id: 'quoted', name: '–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–º–µ—Ç—É', color: 'purple', order: 3 },
    { id: 'negotiating', name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', color: 'orange', order: 4 },
    { id: 'won', name: '–ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ', color: 'green', order: 5 },
    { id: 'lost', name: '–ó–∞–∫—Ä—ã—Ç –Ω–µ—É—Å–ø–µ—à–Ω–æ', color: 'red', order: 6 }
];

// –£—Å–ª—É–≥–∏ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞
var services = [
    { id: 1, name: '–£–ø–∞–∫–æ–≤–∫–∞', price: 50, unit: '—à—Ç' },
    { id: 2, name: '–•—Ä–∞–Ω–µ–Ω–∏–µ', price: 10, unit: '–¥–µ–Ω—å' },
    { id: 3, name: '–î–æ—Å—Ç–∞–≤–∫–∞', price: 200, unit: '–∑–∞–∫–∞–∑' },
    { id: 4, name: '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞', price: 25, unit: '—à—Ç' },
    { id: 5, name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', price: 30, unit: '–∫–≥' }
];
var importServicesData = null; // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —É—Å–ª—É–≥

// ========================================
// UTILITY FUNCTIONS
// ========================================

function updateConnectionStatus() {
    const statusElement = document.getElementById('connectionStatus');
    if (statusElement) {
        if (isOnline) {
            statusElement.innerHTML = '<i data-lucide="wifi" class="h-4 w-4 text-green-500"></i> –û–Ω–ª–∞–π–Ω';
            statusElement.className = 'flex items-center text-green-600 dark:text-green-400 text-sm';
        } else {
            statusElement.innerHTML = '<i data-lucide="wifi-off" class="h-4 w-4 text-red-500"></i> –û—Ñ–ª–∞–π–Ω';
            statusElement.className = 'flex items-center text-red-600 dark:text-red-400 text-sm';
        }
        lucide.createIcons();
    }
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-6 py-4 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'success':
            notification.className += ' bg-green-500 text-white';
            break;
        case 'error':
            notification.className += ' bg-red-500 text-white';
            break;
        case 'warning':
            notification.className += ' bg-yellow-500 text-white';
            break;
        default:
            notification.className += ' bg-blue-500 text-white';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.remove('translate-x-full');
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    }
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(amount);
}

// ========================================
// TAB NAVIGATION
// ========================================

function showTab(tabName) {
    // Hide all tab contents
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
    });
    
    // Remove active class from all tab buttons
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
        button.classList.remove('border-blue-500', 'text-blue-600', 'dark:text-blue-400');
        button.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
    });
    
    // Show selected tab content
    document.getElementById(tabName + '-content').classList.remove('hidden');
    
    // Add active class to selected tab button
    const activeButton = document.getElementById('tab-' + tabName);
    activeButton.classList.add('active', 'border-blue-500', 'text-blue-600', 'dark:text-blue-400');
    activeButton.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
    
    currentTab = tabName;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ localStorage
    localStorage.setItem('ff-active-tab', tabName);
    
    // Update content based on tab
    if (tabName === 'dashboard') {
        updateDashboard();
    } else if (tabName === 'leads') {
        updateLeadsTable();
    } else if (tabName === 'kanban') {
        updateKanbanBoard();
    }
}

// ========================================
// DATA LOADING AND SAVING
// ========================================

function loadFromLocalStorage() {
    console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
    
    const savedPriceDatabase = localStorage.getItem('ff-price-database');
    const savedLeads = localStorage.getItem('ff-leads');
    const savedReminders = localStorage.getItem('ff-reminders');
    const savedUsers = localStorage.getItem('ff-users');
    const savedSettings = localStorage.getItem('ff-global-telegram-settings');
    const savedLeadStatuses = localStorage.getItem('ff-lead-statuses');
    const savedLeadSources = localStorage.getItem('ff-lead-sources');
    const savedPipelineStages = localStorage.getItem('ff-pipeline-stages');
    const savedServices = localStorage.getItem('ff-services');

    if (savedPriceDatabase) {
        priceDatabase = JSON.parse(savedPriceDatabase);
        updatePriceDatabaseTable();
    }
    if (savedLeads) {
        leads = JSON.parse(savedLeads);
    }
    if (savedReminders) {
        reminders = JSON.parse(savedReminders);
        console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ localStorage:', reminders.length);
    }
    if (savedUsers) {
        users = JSON.parse(savedUsers);
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—É—â–∏–º
        if (users.length > 0 && !currentUser) {
            currentUser = users[0];
            updateCurrentUserDisplay();
        }
    }
    if (savedSettings) {
        globalTelegramSettings = JSON.parse(savedSettings);
    }
    if (savedLeadStatuses) {
        leadStatuses = JSON.parse(savedLeadStatuses);
    }
    if (savedLeadSources) {
        leadSources = JSON.parse(savedLeadSources);
    }
    if (savedPipelineStages) {
        pipelineStages = JSON.parse(savedPipelineStages);
    }
    if (savedServices) {
        services = JSON.parse(savedServices);
    }

    console.log('üì± –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
}

async function loadData() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –∫–∞–∫ fallback
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
        loadFromLocalStorage();
        
        if (isOnline) {
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
                const [leadsResponse, remindersResponse, pricesResponse, usersResponse, settingsResponse] = await Promise.all([
                    fetch(`${API_BASE_URL}/leads`),
                    fetch(`${API_BASE_URL}/reminders`),
                    fetch(`${API_BASE_URL}/prices`),
                    fetch(`${API_BASE_URL}/users`),
                    fetch(`${API_BASE_URL}/settings`)
                ]);

                let apiDataLoaded = false;

                if (leadsResponse.ok) {
                    leads = await leadsResponse.json();
                    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è –ª–∏–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    leads = leads.map(lead => ({
                        ...lead,
                        clientName: lead.client_name || lead.clientName || lead.name,
                        contact: lead.phone || lead.contact,
                        comments: lead.notes || lead.comments
                    }));
                    localStorage.setItem('ff-leads', JSON.stringify(leads));
                    apiDataLoaded = true;
                }
                if (remindersResponse.ok) {
                    reminders = await remindersResponse.json();
                    localStorage.setItem('ff-reminders', JSON.stringify(reminders));
                    apiDataLoaded = true;
                }
                if (pricesResponse.ok) {
                    priceDatabase = await pricesResponse.json();
                    localStorage.setItem('ff-price-database', JSON.stringify(priceDatabase));
                    updatePriceDatabaseTable();
                    apiDataLoaded = true;
                }
                if (usersResponse.ok) {
                    users = await usersResponse.json();
                    localStorage.setItem('ff-users', JSON.stringify(users));
                    apiDataLoaded = true;
                }
                if (settingsResponse.ok) {
                    const settings = await settingsResponse.json();
                    if (settings && settings.length > 0) {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
                        const telegramSettings = settings.find(s => s.key === 'telegram_settings');
                        if (telegramSettings) {
                            globalTelegramSettings = JSON.parse(telegramSettings.value);
                            localStorage.setItem('ff-global-telegram-settings', JSON.stringify(globalTelegramSettings));
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ª–∏–¥–æ–≤
                        const leadStatusesSetting = settings.find(s => s.key === 'lead_statuses');
                        if (leadStatusesSetting) {
                            leadStatuses = JSON.parse(leadStatusesSetting.value);
                            localStorage.setItem('ff-lead-statuses', JSON.stringify(leadStatuses));
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤
                        const leadSourcesSetting = settings.find(s => s.key === 'lead_sources');
                        if (leadSourcesSetting) {
                            leadSources = JSON.parse(leadSourcesSetting.value);
                            localStorage.setItem('ff-lead-sources', JSON.stringify(leadSources));
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏
                        const pipelineStagesSetting = settings.find(s => s.key === 'pipeline_stages');
                        if (pipelineStagesSetting) {
                            pipelineStages = JSON.parse(pipelineStagesSetting.value);
                            localStorage.setItem('ff-pipeline-stages', JSON.stringify(pipelineStages));
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞
                        const servicesSetting = settings.find(s => s.key === 'services');
                        if (servicesSetting) {
                            services = JSON.parse(servicesSetting.value);
                            localStorage.setItem('ff-services', JSON.stringify(services));
                        }
                        apiDataLoaded = true;
                    }
                }

                if (apiDataLoaded) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î');
                } else {
                    console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage');
                    loadFromLocalStorage();
                }
            } catch (apiError) {
                console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage:', apiError);
                // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
                loadFromLocalStorage();
            }
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            loadFromLocalStorage();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        setTimeout(() => {
            if (typeof updateGlobalRemindersList === 'function') {
                console.log('–û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
                updateGlobalRemindersList();
            } else {
                console.log('–§—É–Ω–∫—Ü–∏—è updateGlobalRemindersList –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            }
        }, 100);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const savedCalculationItems = localStorage.getItem('ff-calculation-items');
        const savedClientName = localStorage.getItem('ff-client-name');
        const savedComments = localStorage.getItem('ff-comments');
        const savedMarkup = localStorage.getItem('ff-markup');

        if (savedCalculationItems) {
            calculationItems = JSON.parse(savedCalculationItems);
            updateCalculationTable();
        }
        if (savedClientName) {
            document.getElementById('clientName').value = savedClientName;
        }
        if (savedComments) {
            document.getElementById('comments').value = savedComments;
        }
        if (savedMarkup) {
            document.getElementById('markup').value = savedMarkup;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateDashboard();
        updateLeadsTable();
        updateKanbanBoard();
        updateRemindersList();
        updateGlobalRemindersList();
        updateConnectionStatus();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', 'warning');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        loadFromLocalStorage();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (typeof updateGlobalRemindersList === 'function') {
        updateGlobalRemindersList();
    }
}

function saveData() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞
    localStorage.setItem('ff-calculation-items', JSON.stringify(calculationItems));
    localStorage.setItem('ff-client-name', document.getElementById('clientName').value);
    localStorage.setItem('ff-comments', document.getElementById('comments').value);
    localStorage.setItem('ff-markup', document.getElementById('markup').value);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem('ff-leads', JSON.stringify(leads));
    localStorage.setItem('ff-reminders', JSON.stringify(reminders));
    localStorage.setItem('ff-price-database', JSON.stringify(priceDatabase));
    localStorage.setItem('ff-users', JSON.stringify(users));
    localStorage.setItem('ff-global-telegram-settings', JSON.stringify(globalTelegramSettings));
    localStorage.setItem('ff-lead-statuses', JSON.stringify(leadStatuses));
    localStorage.setItem('ff-lead-sources', JSON.stringify(leadSources));
    localStorage.setItem('ff-pipeline-stages', JSON.stringify(pipelineStages));
    localStorage.setItem('ff-services', JSON.stringify(services));
}

// ========================================
// INITIALIZATION
// ========================================

// App initialization functions (called from index.html)
function initializeApp() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const savedUser = localStorage.getItem('ff-current-user');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        updateCurrentUserDisplay();
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        document.getElementById('loginModal').classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (currentUser.role === 'admin') {
            document.getElementById('adminSettingsBtn').style.display = 'block';
        }
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        document.getElementById('loginModal').classList.remove('hidden');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadData();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const savedTab = localStorage.getItem('ff-active-tab');
    if (savedTab) {
        showTab(savedTab);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const currentDate = new Date().toLocaleDateString('ru-RU');
    const currentDateElement = document.getElementById('currentDate');
    if (currentDateElement) {
        currentDateElement.value = currentDate;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
        if (typeof updateGlobalRemindersList === 'function') {
            console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ initializeApp');
            updateGlobalRemindersList();
        } else {
            console.log('–§—É–Ω–∫—Ü–∏—è updateGlobalRemindersList –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
    }, 500);
}

// ========================================
// EXPORT FOR OTHER MODULES
// ========================================

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.FFApp = {
    // Variables
    priceDatabase,
    calculationItems,
    nextItemId,
    leads,
    nextLeadId,
    currentTab,
    reminders,
    nextReminderId,
    currentUser,
    users,
    globalTelegramSettings,
    TELEGRAM_CONFIG,
    API_BASE_URL,
    isOnline,
    leadStatuses,
    leadSources,
    pipelineStages,
    services,
    importServicesData,
    
    // Functions
    updateConnectionStatus,
    showNotification,
    formatDate,
    formatCurrency,
    showTab,
    loadData,
    saveData,
    initializeApp
};

// Make functions available globally for onclick attributes
window.showTab = showTab;
window.loadData = loadData;
window.saveData = saveData;
window.updateConnectionStatus = updateConnectionStatus;
window.showNotification = showNotification;
window.formatDate = formatDate;
window.formatCurrency = formatCurrency;
