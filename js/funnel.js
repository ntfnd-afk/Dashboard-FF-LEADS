// funnel.js - –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂

// –°—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
const FUNNEL_STEPS = [
    { key: 'new', name: '–ù–æ–≤—ã–π', icon: 'üÜï', color: 'green' },
    { key: 'contacted', name: '–°–≤—è–∑–∞–ª–∏—Å—å', icon: 'üìû', color: 'blue' },
    { key: 'quoted', name: '–ù–∞ –ø—Ä–æ—Å—á–µ—Ç–µ', icon: 'üí∞', color: 'yellow' },
    { key: 'negotiating', name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', icon: 'ü§ù', color: 'orange' },
    { key: 'closed', name: '–ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ', icon: '‚úÖ', color: 'red' }
];

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –ë–î –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–∫–∏
const STATUS_MAPPING = {
    'new': 'new',
    'contacted': 'contacted', 
    'quoted': 'quoted',
    'negotiating': 'negotiating',
    'closed': 'closed',
    'closed_won': 'closed',
    'closed_lost': 'closed'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
const STEP_COLORS = {
    green: 'border-green-500 bg-green-50 dark:bg-green-900/20',
    blue: 'border-blue-500 bg-blue-50 dark:bg-blue-900/20',
    yellow: 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20',
    orange: 'border-orange-500 bg-orange-50 dark:bg-orange-900/20',
    red: 'border-red-500 bg-red-50 dark:bg-red-900/20'
};

let funnelData = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
async function loadFunnelData() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        document.getElementById('funnel-loading').classList.remove('hidden');
        document.getElementById('funnel-error').classList.add('hidden');
        document.getElementById('funnel-steps').innerHTML = '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã
        const response = await fetch(`${API_BASE_URL}leads`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const leads = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –ª–∏–¥—ã:', leads);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processFunnelData(leads);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('funnelLastUpdate').textContent = new Date().toLocaleTimeString('ru-RU');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        document.getElementById('funnel-loading').classList.add('hidden');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏:', error);
        showFunnelError(error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
function processFunnelData(leads) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = {};
    FUNNEL_STEPS.forEach(step => {
        statusCounts[step.key] = 0;
    });
    
    leads.forEach(lead => {
        const mappedStatus = STATUS_MAPPING[lead.status] || 'new';
        if (statusCounts.hasOwnProperty(mappedStatus)) {
            statusCounts[mappedStatus]++;
        }
    });
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusCounts);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    funnelData = statusCounts;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateFunnelUI(statusCounts);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ—Ä–æ–Ω–∫–∏
function updateFunnelUI(statusCounts) {
    const totalLeads = statusCounts.new;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('funnel-total-leads').textContent = totalLeads;
    document.getElementById('funnel-closed-deals').textContent = statusCounts.closed;
    
    const totalConversion = totalLeads > 0 ? Math.round((statusCounts.closed / totalLeads) * 100) : 0;
    document.getElementById('funnel-total-conversion').textContent = totalConversion + '%';
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏
    createFunnelSteps(statusCounts);
    
    // –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    const conversions = [];
    let previousCount = totalLeads;
    
    FUNNEL_STEPS.slice(1).forEach(step => {
        const count = statusCounts[step.key] || 0;
        const conversion = previousCount > 0 ? (count / previousCount) * 100 : 0;
        conversions.push(conversion);
        previousCount = count;
    });
    
    const avgConversion = conversions.length > 0 ? 
        Math.round(conversions.reduce((a, b) => a + b, 0) / conversions.length) : 0;
    document.getElementById('funnel-avg-conversion').textContent = avgConversion + '%';
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
function createFunnelSteps(statusCounts) {
    const container = document.getElementById('funnel-steps');
    container.innerHTML = '';
    
    let previousCount = statusCounts.new;
    
    FUNNEL_STEPS.forEach((step, index) => {
        const count = statusCounts[step.key] || 0;
        const percentage = previousCount > 0 ? Math.round((count / previousCount) * 100) : 0;
        const conversion = index > 0 ? Math.round((count / previousCount) * 100) : 100;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–∞–ø–∞
        const stepElement = createFunnelStepElement(step, count, percentage, conversion, index);
        container.appendChild(stepElement);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (index < FUNNEL_STEPS.length - 1) {
            const arrowElement = createArrowElement();
            container.appendChild(arrowElement);
        }
        
        previousCount = count;
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏
function createFunnelStepElement(step, count, percentage, conversion, index) {
    const stepDiv = document.createElement('div');
    stepDiv.className = `bg-white dark:bg-gray-800 rounded-lg border-l-4 ${STEP_COLORS[step.color]} p-6 shadow-md transition-all duration-300 hover:shadow-lg`;
    
    const isFirstStep = index === 0;
    const conversionText = isFirstStep ? '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å' : `–ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversion}%`;
    const conversionClass = isFirstStep ? '' : (conversion >= 50 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400');
    
    stepDiv.innerHTML = `
        <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
                <span class="text-2xl mr-3">${step.icon}</span>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${step.name}</h3>
            </div>
            <div class="bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white px-3 py-1 rounded-full font-semibold">
                ${count}
            </div>
        </div>
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            ${percentage}%
        </div>
        <div class="text-sm ${conversionClass}">
            ${conversionText}
        </div>
        <div class="mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div class="bg-blue-600 h-2 rounded-full transition-all duration-500" style="width: ${percentage}%"></div>
        </div>
    `;
    
    return stepDiv;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
function createArrowElement() {
    const arrowDiv = document.createElement('div');
    arrowDiv.className = 'flex justify-center py-2';
    arrowDiv.innerHTML = `
        <div class="text-gray-400 dark:text-gray-500">
            <i data-lucide="chevron-down" class="h-6 w-6"></i>
        </div>
    `;
    return arrowDiv;
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏
function showFunnelError(message) {
    document.getElementById('funnel-loading').classList.add('hidden');
    document.getElementById('funnel-error').classList.remove('hidden');
    document.getElementById('funnel-error-message').textContent = message;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (typeof loadFunnelData === 'function') {
        loadFunnelData();
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (document.getElementById('funnel-content') && !document.getElementById('funnel-content').classList.contains('hidden')) {
        loadFunnelData();
    }
}, 30000);
