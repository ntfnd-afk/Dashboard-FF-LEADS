// funnel.js - –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂

// –°—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
const FUNNEL_STEPS = [
    { key: 'new', name: '–ù–æ–≤—ã–π', icon: 'üÜï', color: 'green' },
    { key: 'contacted', name: '–°–≤—è–∑–∞–ª–∏—Å—å', icon: 'üìû', color: 'blue' },
    { key: 'quoted', name: '–ù–∞ –ø—Ä–æ—Å—á–µ—Ç–µ', icon: 'üí∞', color: 'yellow' },
    { key: 'negotiating', name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', icon: 'ü§ù', color: 'orange' },
    { key: 'closed', name: '–ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ', icon: '‚úÖ', color: 'red' }
];

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –ë–î –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–∫–∏
const STATUS_MAPPING = {
    'new': 'new',
    'contacted': 'contacted', 
    'quoted': 'quoted',
    'negotiating': 'negotiating',
    'closed': 'closed',
    'closed_won': 'closed',
    'closed_lost': 'closed'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
const STEP_COLORS = {
    green: 'border-green-500 bg-green-50 dark:bg-green-900/20',
    blue: 'border-blue-500 bg-blue-50 dark:bg-blue-900/20',
    yellow: 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20',
    orange: 'border-orange-500 bg-orange-50 dark:bg-orange-900/20',
    red: 'border-red-500 bg-red-50 dark:bg-red-900/20'
};

let funnelData = {};
let funnelSources = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
async function loadFunnelData() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        document.getElementById('funnel-loading').classList.remove('hidden');
        document.getElementById('funnel-error').classList.add('hidden');
        document.getElementById('funnel-steps').innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filters = getFunnelFilters();
        console.log('üîç –§–∏–ª—å—Ç—Ä—ã –≤–æ—Ä–æ–Ω–∫–∏:', filters);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const response = await fetch(`${API_BASE_URL}leads`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const leads = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –ª–∏–¥—ã:', leads);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const filteredLeads = filterLeads(leads, filters);
        console.log('üìà –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã:', filteredLeads);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        await loadFunnelSources(leads);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processFunnelData(filteredLeads);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('funnelLastUpdate').textContent = new Date().toLocaleTimeString('ru-RU');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        document.getElementById('funnel-loading').classList.add('hidden');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏:', error);
        showFunnelError(error.message);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function getFunnelFilters() {
    const dateFrom = document.getElementById('funnelDateFrom').value;
    const dateTo = document.getElementById('funnelDateTo').value;
    const source = document.getElementById('funnelSourceFilter').value;
    
    return {
        dateFrom: dateFrom ? new Date(dateFrom) : null,
        dateTo: dateTo ? new Date(dateTo) : null,
        source: source || null
    };
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤
function filterLeads(leads, filters) {
    return leads.filter(lead => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if (filters.dateFrom || filters.dateTo) {
            const leadDate = new Date(lead.created_at);
            
            if (filters.dateFrom && leadDate < filters.dateFrom) {
                return false;
            }
            
            if (filters.dateTo) {
                const endDate = new Date(filters.dateTo);
                endDate.setHours(23, 59, 59, 999); // –í–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –¥–µ–Ω—å
                if (leadDate > endDate) {
                    return false;
                }
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        if (filters.source && lead.source !== filters.source) {
            return false;
        }
        
        return true;
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
async function loadFunnelSources(leads) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const response = await fetch(`${API_BASE_URL}settings`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const settings = await response.json();
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É lead_sources
        const leadSourcesSetting = settings.find(setting => setting.key === 'lead_sources');
        let sources = [];
        
        if (leadSourcesSetting && leadSourcesSetting.value) {
            try {
                sources = JSON.parse(leadSourcesSetting.value);
                console.log('üìä –û–±—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', sources);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
                // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –ª–∏–¥–æ–≤
                sources = [...new Set(leads.map(lead => lead.source).filter(source => source))];
            }
        } else {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –ª–∏–¥–æ–≤
            sources = [...new Set(leads.map(lead => lead.source).filter(source => source))];
        }
        
        funnelSources = sources;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sourceSelect = document.getElementById('funnelSourceFilter');
        const currentValue = sourceSelect.value;
        
        // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        sourceSelect.innerHTML = '<option value="">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        sources.forEach(source => {
            const option = document.createElement('option');
            option.value = source.id || source; // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            option.textContent = source.name || source; // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            sourceSelect.appendChild(option);
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        sourceSelect.value = currentValue;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –ª–∏–¥–æ–≤
        const sources = [...new Set(leads.map(lead => lead.source).filter(source => source))];
        funnelSources = sources;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sourceSelect = document.getElementById('funnelSourceFilter');
        const currentValue = sourceSelect.value;
        
        // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        sourceSelect.innerHTML = '<option value="">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources.forEach(source => {
            const option = document.createElement('option');
            option.value = source;
            option.textContent = source;
            sourceSelect.appendChild(option);
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        sourceSelect.value = currentValue;
    }
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
function resetFunnelFilters() {
    document.getElementById('funnelDateFrom').value = '';
    document.getElementById('funnelDateTo').value = '';
    document.getElementById('funnelSourceFilter').value = '';
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadFunnelData();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
function processFunnelData(leads) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = {};
    FUNNEL_STEPS.forEach(step => {
        statusCounts[step.key] = 0;
    });
    
    leads.forEach(lead => {
        const mappedStatus = STATUS_MAPPING[lead.status] || 'new';
        if (statusCounts.hasOwnProperty(mappedStatus)) {
            statusCounts[mappedStatus]++;
        }
    });
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusCounts);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    funnelData = statusCounts;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateFunnelUI(statusCounts);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ—Ä–æ–Ω–∫–∏
function updateFunnelUI(statusCounts) {
    const totalLeads = statusCounts.new;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('funnel-total-leads').textContent = totalLeads;
    document.getElementById('funnel-closed-deals').textContent = statusCounts.closed;
    
    const totalConversion = totalLeads > 0 ? Math.round((statusCounts.closed / totalLeads) * 100) : 0;
    document.getElementById('funnel-total-conversion').textContent = totalConversion + '%';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    showFunnelFilterInfo();
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏
    createFunnelSteps(statusCounts);
    
    // –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    const conversions = [];
    let previousCount = totalLeads;
    
    FUNNEL_STEPS.slice(1).forEach(step => {
        const count = statusCounts[step.key] || 0;
        const conversion = previousCount > 0 ? (count / previousCount) * 100 : 0;
        conversions.push(conversion);
        previousCount = count;
    });
    
    const avgConversion = conversions.length > 0 ? 
        Math.round(conversions.reduce((a, b) => a + b, 0) / conversions.length) : 0;
    document.getElementById('funnel-avg-conversion').textContent = avgConversion + '%';
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
function showFunnelFilterInfo() {
    const filters = getFunnelFilters();
    const filterInfo = [];
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –ø–µ—Ä–∏–æ–¥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ - –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    // if (filters.dateFrom || filters.dateTo) {
    //     const fromStr = filters.dateFrom ? filters.dateFrom.toLocaleDateString('ru-RU') : '–Ω–∞—á–∞–ª–∞';
    //     const toStr = filters.dateTo ? filters.dateTo.toLocaleDateString('ru-RU') : '—Å–µ–≥–æ–¥–Ω—è';
    //     filterInfo.push(`üìÖ –ü–µ—Ä–∏–æ–¥: ${fromStr} - ${toStr}`);
    // }
    
    if (filters.source) {
        filterInfo.push(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${filters.source}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    const title = document.querySelector('#funnel-content h2');
    if (filterInfo.length > 0) {
        title.innerHTML = `üéØ –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ <span class="text-sm font-normal text-gray-500 dark:text-gray-400">(${filterInfo.join(', ')})</span>`;
    } else {
        title.innerHTML = 'üéØ –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
function createFunnelSteps(statusCounts) {
    const container = document.getElementById('funnel-steps');
    container.innerHTML = '';
    
    let previousCount = statusCounts.new;
    
    FUNNEL_STEPS.forEach((step, index) => {
        const count = statusCounts[step.key] || 0;
        const percentage = previousCount > 0 ? Math.round((count / previousCount) * 100) : 0;
        const conversion = index > 0 ? Math.round((count / previousCount) * 100) : 100;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–∞–ø–∞
        const stepElement = createFunnelStepElement(step, count, percentage, conversion, index);
        container.appendChild(stepElement);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (index < FUNNEL_STEPS.length - 1) {
            const arrowElement = createArrowElement();
            container.appendChild(arrowElement);
        }
        
        previousCount = count;
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏
function createFunnelStepElement(step, count, percentage, conversion, index) {
    const stepDiv = document.createElement('div');
    stepDiv.className = `bg-white dark:bg-gray-800 rounded-lg border-l-4 ${STEP_COLORS[step.color]} p-6 shadow-md transition-all duration-300 hover:shadow-lg`;
    
    const isFirstStep = index === 0;
    const conversionText = isFirstStep ? '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å' : `–ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversion}%`;
    const conversionClass = isFirstStep ? '' : (conversion >= 50 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400');
    
    stepDiv.innerHTML = `
        <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
                <span class="text-2xl mr-3">${step.icon}</span>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${step.name}</h3>
            </div>
            <div class="bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white px-3 py-1 rounded-full font-semibold">
                ${count}
            </div>
        </div>
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            ${percentage}%
        </div>
        <div class="text-sm ${conversionClass}">
            ${conversionText}
        </div>
        <div class="mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div class="bg-blue-600 h-2 rounded-full transition-all duration-500" style="width: ${percentage}%"></div>
        </div>
    `;
    
    return stepDiv;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
function createArrowElement() {
    const arrowDiv = document.createElement('div');
    arrowDiv.className = 'flex justify-center py-2';
    arrowDiv.innerHTML = `
        <div class="text-gray-400 dark:text-gray-500">
            <i data-lucide="chevron-down" class="h-6 w-6"></i>
        </div>
    `;
    return arrowDiv;
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏
function showFunnelError(message) {
    document.getElementById('funnel-loading').classList.add('hidden');
    document.getElementById('funnel-error').classList.remove('hidden');
    document.getElementById('funnel-error-message').textContent = message;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    const today = new Date();
    const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
    
    document.getElementById('funnelDateFrom').value = thirtyDaysAgo.toISOString().split('T')[0];
    document.getElementById('funnelDateTo').value = today.toISOString().split('T')[0];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (typeof loadFunnelData === 'function') {
        loadFunnelData();
    }
});

// –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏
let funnelUpdateTimeout = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
function scheduleFunnelUpdate() {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (funnelUpdateTimeout) {
        clearTimeout(funnelUpdateTimeout);
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–¥–µ–±–∞—É–Ω—Å)
    funnelUpdateTimeout = setTimeout(() => {
        if (document.getElementById('funnel-content') && !document.getElementById('funnel-content').classList.contains('hidden')) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Ä–æ–Ω–∫—É –ø–æ —Å–æ–±—ã—Ç–∏—é...');
            loadFunnelData();
        }
    }, 2000);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.updateFunnel = scheduleFunnelUpdate;
