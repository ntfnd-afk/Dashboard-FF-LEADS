// server-monitor.js
// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const https = require('https');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    NOTIFICATION_SERVER_URL: 'http://51.250.97.39:3001/api/health',
    TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN',
    TELEGRAM_CHAT_ID: process.env.TELEGRAM_GROUP_ID || 'YOUR_GROUP_ID',
    NORMAL_INTERVAL: 600000, // 10 –º–∏–Ω—É—Ç –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    DOWN_INTERVAL: 120000,   // 2 –º–∏–Ω—É—Ç—ã –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 5000
};

let isServerDown = false;
let retryCount = 0;
let monitoringInterval = null;

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramAlert(message) {
    const url = `https://api.telegram.org/bot${CONFIG.TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const data = JSON.stringify({
        chat_id: CONFIG.TELEGRAM_CHAT_ID,
        text: `üö® –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ï–†–ê\n\n${message}`,
        parse_mode: 'HTML'
    });

    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': data.length
        }
    };

    return new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => responseData += chunk);
            res.on('end', () => {
                if (res.statusCode === 200) {
                    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                    resolve(responseData);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', res.statusCode);
                    reject(new Error(`HTTP ${res.statusCode}`));
                }
            });
        });

        req.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram:', error);
            reject(error);
        });

        req.write(data);
        req.end();
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
    try {
        const response = await fetch(CONFIG.NOTIFICATION_SERVER_URL, {
            method: 'GET',
            timeout: 10000
        });

        if (response.ok) {
            if (isServerDown) {
                // –°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                await sendTelegramAlert(
                    `‚úÖ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
                    `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                    `üîó URL: ${CONFIG.NOTIFICATION_SERVER_URL}\n` +
                    `‚è∞ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∂–∏–º: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç`
                );
                isServerDown = false;
                retryCount = 0;
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∂–∏–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
                updateMonitoringInterval();
            } else {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)');
            }
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        
        if (!isServerDown) {
            isServerDown = true;
            retryCount = 1;
            
            await sendTelegramAlert(
                `üö® –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n` +
                `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n` +
                `üîó URL: ${CONFIG.NOTIFICATION_SERVER_URL}\n` +
                `‚è∞ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∂–∏–º: –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã\n` +
                `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...`
            );
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∂–∏–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã');
            updateMonitoringInterval();
        } else {
            retryCount++;
            
            if (retryCount <= CONFIG.RETRY_ATTEMPTS) {
                await sendTelegramAlert(
                    `‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n` +
                    `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                    `üîÑ –ü–æ–ø—ã—Ç–∫–∞: ${retryCount}/${CONFIG.RETRY_ATTEMPTS}\n` +
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n` +
                    `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã`
                );
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function updateMonitoringInterval() {
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
    }
    
    const interval = isServerDown ? CONFIG.DOWN_INTERVAL : CONFIG.NORMAL_INTERVAL;
    const intervalMinutes = interval / 60000;
    
    console.log(`‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç`);
    
    monitoringInterval = setInterval(checkServerHealth, interval);
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startMonitoring() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    console.log(`üì° –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∫–∞–∂–¥—ã–µ ${CONFIG.NORMAL_INTERVAL / 60000} –º–∏–Ω—É—Ç`);
    console.log(`üö® –†–µ–∂–∏–º —Å–±–æ—è: –∫–∞–∂–¥—ã–µ ${CONFIG.DOWN_INTERVAL / 60000} –º–∏–Ω—É—Ç`);
    console.log(`üéØ URL: ${CONFIG.NOTIFICATION_SERVER_URL}`);
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkServerHealth();
    
    // –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    updateMonitoringInterval();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
    }
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
    }
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
startMonitoring();
