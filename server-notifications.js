// server-notifications.js
// –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É)

const express = require('express');
const { Pool } = require('pg');
const cron = require('node-cron');
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const pool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'ff_dashboard',
    password: process.env.DB_PASSWORD || 'your_password',
    port: process.env.DB_PORT || 5432,
});

// Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const TELEGRAM_CONFIG = {
    botToken: process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN',
    groupId: process.env.TELEGRAM_GROUP_ID || 'YOUR_GROUP_ID'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', async () => {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: date_time –≤–º–µ—Å—Ç–æ datetime
        const query = `
            SELECT * FROM reminders 
            WHERE date_time <= NOW() 
            AND completed = false 
            AND sent = false
        `;
        
        const result = await pool.query(query);
        
        for (const reminder of result.rows) {
            await sendReminderNotification(reminder);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async function sendReminderNotification(reminder) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await sendTelegramNotification(reminder);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await pool.query(
            'UPDATE reminders SET sent = true WHERE id = $1',
            [reminder.id]
        );
        
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${reminder.text}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendTelegramNotification(reminder) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        const botToken = reminder.telegram_bot_token || TELEGRAM_CONFIG.botToken;
        const chatId = reminder.telegram_chat_id || TELEGRAM_CONFIG.groupId;
        
        if (!botToken || botToken === 'YOUR_BOT_TOKEN') {
            console.log('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        
        let message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.text}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (reminder.lead_id) {
            try {
                const leadQuery = 'SELECT client_name FROM leads WHERE id = $1';
                const leadResult = await pool.query(leadQuery, [reminder.lead_id]);
                
                if (leadResult.rows.length > 0 && leadResult.rows[0].client_name) {
                    message += `\n\nüë§ –ö–ª–∏–µ–Ω—Ç: ${leadResult.rows[0].client_name}`;
                }
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ:', error);
            }
        }
        
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                disable_notification: false
            })
        });
        
        if (!response.ok) {
            throw new Error(`Telegram API error: ${response.status}`);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
        throw error;
    }
}

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.use(express.json());

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
app.post('/api/reminders', async (req, res) => {
    try {
        const { text, datetime, lead_id, telegram_bot_token, telegram_chat_id } = req.body;
        
        const query = `
            INSERT INTO reminders (text, date_time, lead_id, telegram_bot_token, telegram_chat_id, completed, sent)
            VALUES ($1, $2, $3, $4, $5, false, false)
            RETURNING *
        `;
        
        const result = await pool.query(query, [text, datetime, lead_id, telegram_bot_token, telegram_chat_id]);
        
        res.json(result.rows[0]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
app.get('/api/reminders', async (req, res) => {
    try {
        const query = 'SELECT * FROM reminders ORDER BY date_time DESC';
        const result = await pool.query(query);
        res.json(result.rows);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
app.put('/api/reminders/:id/complete', async (req, res) => {
    try {
        const { id } = req.params;
        
        const query = 'UPDATE reminders SET completed = true WHERE id = $1';
        await pool.query(query, [id]);
        
        res.json({ success: true });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìÖ Cron –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É`);
    console.log(`üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ reminders`);
});
